ARG BUILD_IMAGE=node
ARG BUILD_IMAGE_TAG=16.17
# Can use either the ECR image or Docker Hub
ARG RUNTIME_IMAGE=public.ecr.aws/lambda/nodejs
# ARG RUNTIME_IMAGE=amazon/aws-lambda-nodejs
ARG RUNTIME_IMAGE_TAG=20

##
## Dev dependencies
##
FROM ${BUILD_IMAGE}:${BUILD_IMAGE_TAG} AS dev-dependencies

WORKDIR /opt/app

COPY app/package.json app/package-lock.json ./
RUN npm ci --ignore-scripts

##
## Prod dependencies
##
FROM ${BUILD_IMAGE}:${BUILD_IMAGE_TAG} AS prod-dependencies

WORKDIR /opt/app

COPY app/package.json app/package-lock.json ./
RUN npm ci --ignore-scripts --omit=dev


##
## Build
##
FROM ${BUILD_IMAGE}:${BUILD_IMAGE_TAG} AS build

WORKDIR /opt/app

COPY app/src ./src
COPY app/package.json \
     app/package-lock.json \
     app/tsconfig.json ./
COPY --from=dev-dependencies \
     /opt/app/node_modules ./node_modules

RUN npm run compile --ignore-scripts


##
## Runtime
##
FROM ${RUNTIME_IMAGE}:${RUNTIME_IMAGE_TAG} as runtime

##
## Set environment variables
##
ENV NODE_ENV production
ENV NODE_CONFIG_STRICT_MODE false
ENV VERSION ""
ENV LOG_LEVEL trace
ENV DD_VERSION ${VERSION}

WORKDIR ${LAMBDA_TASK_ROOT}

##
## Install dependencies
##
COPY --from=prod-dependencies \
     /opt/app/node_modules ./node_modules

##
## Copy over transpiled project files
##
COPY --from=build \
     /opt/app/dist ./
COPY app/config ./config

CMD [ "handler.handler" ]
